[include]
    path = .gitconfig.inc
[core]
    autocrlf = input
    ignorecase = false
[init]
    defaultBranch = master
    templatedir = ~/.git-templates
[branch]
    autosetuprebase = local
[rebase]
    autostash = true
[pull]
    ff = only
[push]
    default = simple
[diff]
    renamelimit = 999999
    colorMoved = default
[merge]
    conflictstyle = diff3
    renamelimit = 999999
[interactive]
    diffFilter = delta --color-only
[delta]
    navigate = true
[color]
    diff = auto
    status = auto
    branch = auto
    interactive = auto
    ui = auto
[alias]
    cp = cherry-pick
    st = status -sb
    ci = commit
    co = checkout
    br = branch
    f = fetch --verbose --prune
    lol = log --pretty=oneline --abbrev-commit --graph --decorate
    plog = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
    pullall = "!f(){ git pull \"$@\" && git submodule update --init --recursive && git submodule foreach 'git checkout master; git rebase origin/master'; }; f"
    sync = "!f(){ git submodule foreach -q --recursive 'branch=\"$(git config -f $toplevel/.gitmodules submodule.$name.branch)\"; [ \"$branch\" = \"\" ] || git checkout $branch'; }; f"
    pushf = push --force-with-lease
    conflicts = diff --name-only --diff-filter=U
    gh-pr = "!f(){ git fetch origin pull/$1/head:pr/$1; git checkout pr/$1; }; f"
[mergetool "diffmerge"]
    cmd = /usr/local/bin/diffmerge --merge --result=\"$MERGED\" \"$LOCAL\" \"$BASE\" \"$REMOTE\"
    trustExitCode = true
[mergetool "sourcetree"]
    cmd = /Applications/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
    trustExitCode = true
[mergetool "splice-osx"]
    cmd = "mvim -f $BASE $LOCAL $REMOTE $MERGED -c 'SpliceInit'"
    trustExitCode = true
[difftool "diffmerge"]
    cmd = /usr/local/bin/diffmerge \"$LOCAL\" \"$REMOTE\"
[difftool "sourcetree"]
    cmd = opendiff \"$LOCAL\" \"$REMOTE\"
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
