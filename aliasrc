alias dotf='cd $HOME/.dotfiles'

alias la='ls -a'
alias ll='ls -l'
alias l.='ls -d .*'
alias lrt='ll -rt'
alias cp='cp -i'
alias mv='mv -i'
alias rm='rm -i'
alias mkdir='mkdir -p'

alias ..='cd ..'

alias g='git'
alias k='kubectl'
alias mux='tmuxinator'
alias tf='terraform'

if [[ "$OSTYPE" == darwin* ]]; then
    alias ls='ls -G'
    export LSCOLORS=gxfxcxdxbxegedabagacad
fi

if [[ -f "/Applications/MacVim.app/Contents/MacOS/Vim" ]]; then
    alias vim='/Applications/MacVim.app/Contents/MacOS/Vim'
    alias vi='vim'
fi

tox() {
    if [[ -z "$TOX_PATH" && -x $(command -v pyenv) ]]; then
        for pyv in $(pyenv versions --bare); do
            TOX_PATH="$TOX_PATH:$(pyenv prefix $pyv)/bin"
        done
    fi

    export TOX_PATH=$TOX_PATH

    env PATH=$TOX_PATH:$PATH tox $@
}

aws-profile() {
    read -r -d '' SCRIPT <<'EOF'
import argparse
from configparser import RawConfigParser
import os
import subprocess
import sys
from textwrap import dedent

# interactive output needs to be over stderr to avoid being captured
# by the bash script looking for a profile name on stdout
out = lambda *a, **kw: print(*a, **kw, file=sys.stderr)

def select_profile(current_profile=None):
    config_profile_prefix = 'profile '
    config_path = os.path.expanduser('~/.aws/config')

    config = RawConfigParser()
    config.read(config_path)

    profiles = []
    for section in config.sections():
        if section.startswith(config_profile_prefix):
            profile = section[len(config_profile_prefix):]
            profiles.append(profile)

    out('--- Choose AWS profile ---')
    for idx, profile in enumerate(profiles, 1):
        suffix = ' ** current **' if profile == current_profile else ''
        out(f'{idx}: {profile}{suffix}')
    out()

    while True:
        out(f'Pick one: [1-{len(profiles)}] ', end='')
        choice = input().strip()
        try:
            if not choice and current_profile:
                return current_profile
            if choice == 'q':
                sys.exit(0)
            choice = int(choice) - 1
            if not 0 <= choice < len(profiles):
                raise Exception
        except Exception:
            out('Unrecognized option, try again.')
        else:
            break

    return profiles[choice]

def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('-c', '--current', action='store_true')
    parser.add_argument('--unset', action='store_true')
    parser.add_argument('profile', nargs='?')
    return parser.parse_args()

def main():
    args = parse_args()

    current_profile = os.getenv('AWS_PROFILE', '')
    if args.current:
        out(f'Current AWS_PROFILE={current_profile}')
        return

    if args.unset:
        print(dedent(
            '''
            unset AWS_ACCESS_KEY_ID
            unset AWS_SECRET_ACCESS_KEY
            unset AWS_SESSION_TOKEN
            unset AWS_PROFILE
            unset AWS_DEFAULT_PROFILE
            '''
        ))
        return

    profile = args.profile
    if not profile:
        profile = select_profile(current_profile)

    args = ['aws', 'configure', 'list']
    env = {**dict(os.environ), 'AWS_PROFILE': profile}
    p = subprocess.run(args, capture_output=True, text=True, env=env)

    if p.returncode != 0:
        out('Session is invalid, triggering an SSO login ...')
        args = ['aws', 'sso', 'login']
        env['BROWSER'] = '/bin/echo'
        subprocess.run(args, stdout=sys.stderr, env=env, text=True)

    out(f'Activated AWS_PROFILE={profile}')
    print(dedent(
        f'''
        unset AWS_ACCESS_KEY_ID
        unset AWS_SECRET_ACCESS_KEY
        unset AWS_SESSION_TOKEN
        export AWS_PROFILE={profile}
        export AWS_DEFAULT_PROFILE={profile}
        '''
    ))

if __name__ == '__main__':
    try:
        sys.exit(main())
    except KeyboardInterrupt:
        pass
EOF

    eval "$(python3 -c "$SCRIPT" "$@")"
}

alias ap=aws-profile
